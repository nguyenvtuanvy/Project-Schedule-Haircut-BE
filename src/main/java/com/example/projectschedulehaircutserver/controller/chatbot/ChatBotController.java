package com.example.projectschedulehaircutserver.controller.chatbot;

import com.example.projectschedulehaircutserver.dto.ComboDTO;
import com.example.projectschedulehaircutserver.dto.EmployeeDTO;
import com.example.projectschedulehaircutserver.dto.ServiceDTO;
import com.example.projectschedulehaircutserver.service.chatbot.GeminiAIService;
import com.example.projectschedulehaircutserver.service.combo.ComboService;
import com.example.projectschedulehaircutserver.service.employee.EmployeeService;
import com.example.projectschedulehaircutserver.service.service.ProductService;
import lombok.AllArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Comparator;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/web/chatbot")
@AllArgsConstructor
public class ChatBotController {
    private final GeminiAIService geminiAIService;
    private final ProductService productService;
    private final ComboService comboService;
    private final EmployeeService employeeService;

    @PostMapping("/ask")
    public ResponseEntity<String> handleChatRequest(@RequestBody Map<String, String> request) {
        String userMessage = request.get("message");
        String response;

        if (userMessage == null || userMessage.trim().isEmpty()) {
            return ResponseEntity.badRequest().body("Vui l√≤ng nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n");
        }

        String lowerMessage = userMessage.toLowerCase();

        if (containsAny(lowerMessage, "ki·ªÉu t√≥c", "khu√¥n m·∫∑t", "t√≥c", "m·∫∑t", "ph√π h·ª£p", "c·∫Øt t√≥c", "g·ª£i √Ω")) {
            response = handleHairStyleRequest(userMessage);
        } else if (containsAny(lowerMessage, "d·ªãch v·ª•", "service", "gi√°", "b·∫£ng gi√°", "chi ph√≠")) {
            response = handleServiceInquiry();
        }  else if (containsAny(lowerMessage, "nh√¢n vi√™n", "stylist", "th·ª£", "ng∆∞·ªùi l√†m","tay ngh·ªÅ")) {
            response = handleEmployeeInquiry();
        } else {
            response = handleGeneralQuestion(userMessage);
        }

        return ResponseEntity.ok(response);
    }

    private boolean containsAny(String input, String... keywords) {
        for (String keyword : keywords) {
            if (input.contains(keyword)) {
                return true;
            }
        }
        return false;
    }

    private String handleHairStyleRequest(String userMessage) {
        if (containsFaceDescription(userMessage)) {
            return generateHairStyleRecommendation(userMessage);
        } else {
            // N·∫øu kh√¥ng c√≥ m√¥ t·∫£ khu√¥n m·∫∑t, y√™u c·∫ßu ng∆∞·ªùi d√πng cung c·∫•p
            return """
                ƒê·ªÉ g·ª£i √Ω ki·ªÉu t√≥c ph√π h·ª£p, vui l√≤ng m√¥ t·∫£ khu√¥n m·∫∑t c·ªßa b·∫°n bao g·ªìm:
                - H√¨nh d√°ng khu√¥n m·∫∑t (tr√≤n, vu√¥ng, oval, tr√°i tim...)
                - ƒê·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t (tr√°n cao/r·ªông, c·∫±m nh·ªçn/tr√≤n, g√≤ m√°...)
                - Ki·ªÉu t√≥c hi·ªán t·∫°i (n·∫øu c√≥)
                V√≠ d·ª•: "M·∫∑t t√¥i h√¨nh oval, tr√°n cao, g√≤ m√° r·ªông, t√≥c hi·ªán t·∫°i d√†i ngang vai"
                """;
        }
    }

    private boolean containsFaceDescription(String message) {
        String[] faceKeywords = {"tr√≤n", "vu√¥ng", "oval", "d√†i", "tr√°i tim", "tr√°n", "c·∫±m", "g√≤ m√°", "m≈©i", "t√≥c"};
        for (String keyword : faceKeywords) {
            if (message.toLowerCase().contains(keyword)) {
                return true;
            }
        }
        return false;
    }

    private String generateHairStyleRecommendation(String description) {
        String prompt = """
            B·∫°n l√† chuy√™n gia t√≥c t·∫°i Boss Barber. D·ª±a tr√™n m√¥ t·∫£ khu√¥n m·∫∑t sau, h√£y g·ª£i √Ω 3 ki·ªÉu t√≥c ph√π h·ª£p nh·∫•t:
            
            **M√¥ t·∫£ khu√¥n m·∫∑t:**
            %s
            
            **Y√™u c·∫ßu ƒë·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi:**
            ‚úÇÔ∏è **G·ª£i √Ω ki·ªÉu t√≥c ph√π h·ª£p**
            
            üîπ [T√™n ki·ªÉu t√≥c 1]
            
            üîπ [T√™n ki·ªÉu t√≥c 2]
            
            üîπ [T√™n ki·ªÉu t√≥c 3]
            
            **L∆∞u √Ω:**
            - Gi·∫£i th√≠ch ng·∫Øn g·ªçn t·∫°i sao ph√π h·ª£p v·ªõi khu√¥n m·∫∑t
            """.formatted(description);

        return geminiAIService.generateContent(prompt);
    }

    private String handleServiceInquiry() {
        Set<ServiceDTO> services = productService.findAllService();
        Set<ComboDTO> combos = comboService.findAllCombo();

        String prompt = """
        B·∫°n l√† tr·ª£ l√Ω Boss Barber. H√£y tr√¨nh b√†y th√¥ng tin d·ªãch v·ª• theo ƒë·ªãnh d·∫°ng sau:
    
        **DANH S√ÅCH D·ªäCH V·ª§**
        %s
    
        **DANH S√ÅCH COMBO**
        %s
    
        Y√™u c·∫ßu:
        - M·ªói d·ªãch v·ª•/combo tr√™n 1 d√≤ng
        - ƒê·ªãnh d·∫°ng: T√™n - Gi√° - Th·ªùi gian th·ª±c hi·ªán
        - S·∫Øp x·∫øp theo th·ª© t·ª± gi√° tƒÉng d·∫ßn
        """.formatted(
                services.stream()
                        .sorted(Comparator.comparing(ServiceDTO::getPrice))
                        .map(s -> String.format("- %s: %d VND (%d ph√∫t)", s.getName(), s.getPrice().intValue(), s.getHaircutTime()))
                        .collect(Collectors.joining("\n")),
                combos.stream()
                        .sorted(Comparator.comparing(ComboDTO::getPrice))
                        .map(c -> String.format("- %s: %d VND (%d ph√∫t)", c.getName(), c.getPrice().intValue(), c.getHaircutTime()))
                        .collect(Collectors.joining("\n"))
        );

        return geminiAIService.generateContent(prompt);
    }

    private String handleEmployeeInquiry() {
        Set<EmployeeDTO> employees = employeeService.showAllEmployee();

        if (employees.isEmpty()) {
            return "Hi·ªán t·∫°i ch∆∞a c√≥ th√¥ng tin nh√¢n vi√™n.";
        }

        String prompt = """
            B·∫°n l√† tr·ª£ l√Ω Boss Barber. H√£y tr√¨nh b√†y th√¥ng tin nh√¢n vi√™n theo ƒë·ªãnh d·∫°ng sau:
            
            **DANH S√ÅCH NH√ÇN VI√äN**
            %s
            
            Y√™u c·∫ßu:
            - M·ªói nh√¢n vi√™n tr√™n 1 d√≤ng
            - ƒê·ªãnh d·∫°ng: T√™n - V·ªã tr√≠ - S·ªë ƒëi·ªán tho·∫°i
            - Nh√≥m theo lo·∫°i nh√¢n vi√™n
            """.formatted(
                employees.stream()
                        .sorted(Comparator.comparing(EmployeeDTO::getType))
                        .map(e -> {
                            String position = e.getType() == 0
                                    ? "Nh√¢n vi√™n c·∫Øt t√≥c"
                                    : "Nh√¢n vi√™n spa";
                            return String.format("- %s: %s - %s",
                                    e.getFullName(),
                                    position,
                                    e.getPhone());
                        })
                        .collect(Collectors.joining("\n"))
        );

        return geminiAIService.generateContent(prompt);
    }

    private String handleGeneralQuestion(String userMessage) {
        String prompt = """
            B·∫°n l√† tr·ª£ l√Ω Boss Barber. Tr·∫£ l·ªùi ng·∫Øn g·ªçn (d∆∞·ªõi 30 t·ª´):
            
            "%s"
            """.formatted(userMessage);

        return geminiAIService.generateContent(prompt);
    }
}